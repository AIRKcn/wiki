<?php
/**
 * 更新ct3网络盒子网络服务状态
 * @datetime 2015-07-03
 * @author Robert <cnwangyl@gmail.com>
 */
set_time_limit(0);
define('SAE_APIURL', 'http://xxx.sinaapp.com/api.php');

// ******** Core Logic ********* //
// 获取 CT3 Remote Address IP
$address = getRemoteAddress();
echo '= [', date('Y-m-d H:i:s'), '] =', PHP_EOL;
if ( $address!==false ) {
	// 正确获取IP地址, 执行更新操作
	echo 'update remote cacher by address : ', $address, PHP_EOL;
	// 下面这个方法用于更新sae上缓存的家里内网服务在外网对应的ip地址，如果不需要可以禁用
	UpdateRemoteInfo( $address );
} else {
	// 获取IP地址失败，重启MFucker路由器
	echo 'restart wifi', PHP_EOL;
	$_start = microtime(true);
	restartRouter();
	$retry_max = 10;
	$retry = 0;
	do {
		$retry += 1;
		if ( $retry > $retry_max ) {
			break;
		}
		usleep(500000); // sleep 0.5 second
		$address = getRemoteAddress();
	} while ( $address!==false );
	echo 'connect to network used time : ', number_format(microtime(true)-$_start, 2, '.', ''), PHP_EOL;
	if ( $address!==false ) {
		// 下面这个方法用于更新sae上缓存的家里内网服务在外网对应的ip地址，如果不需要可以禁用
		UpdateRemoteInfo( $address );
		echo 'new address is : ', $address, PHP_EOL;
	}
}
exit;



/**
 * 通过网络请求，获取CT3外部网络IP地址
 */
function getRemoteAddress() {
	$return = false;
	$apiurl = 'http://1111.ip138.com/ic.asp';
	$result = curl_get($apiurl);
	if ( $result['status'] ) {
		// $html = iconv('GBK', 'UTF-8', $result['result']);
		$html = $result['result'];
		preg_match('/\[(.+)\]/', $html, $matches);
		$address = $matches[1];
		if ( preg_match('/^(([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]).){3}([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/', $address) ) {
			$return = $address;
		}
	}
	return $return;
}



/**
 * 重启路由器
 */
function restartRouter () {
	$return = false;
	$apiurl = 'http://192.168.0.1/userRpm/SysRebootRpm.htm';
	$opts = array('Reboot'=>'%D6%D8%C6%F4%CF%B5%CD%B3');
	$header = array(
		'Host'=>'192.168.0.1',
		'Pragma'=>'no-cache',
		'Cache-Control'=>'no-cache',
		'Accept-Encoding'=>'gzip, deflate, sdch',
		'Accept-Language'=>'zh-CN,zh;q=0.8,en;q=0.6',
		'User-Agent'=>'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.130 Safari/537.36',
		'Accept'=>'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
		'Connection'=>'keep-alive',
		// $authinfo = base64_encode('user:password')
		'Authorization'=>'Basic '.$authinfo,
		'Referer'=>'http://192.168.0.1/userRpm/MenuRpm.htm',
	);
	$result = curl_get($apiurl, $opts, $header);
	if ( $result['status']!==false ) {
		// $html = mb_convert_encoding($result['result'], 'UTF-8', 'GB18030');
		$return = true;
	}
	return $return;
}

// 获取缓存服务器中的IP地址信息
// GetRemoteInfo();

/**
 * 更新服务端缓存信息
 */
function UpdateRemoteInfo( $ip ) {
	$return = false;
	$apiurl = SAE_APIURL;
	$opts = array('a'=>'update', 'ip'=>$ip);
	$result = curl_get($apiurl, $opts);
	if ( $result['status']!==false ) {
		$return = false;
	}
	return $return;
}

/**
 * 获取缓存中的IP地址信息
 */
function GetRemoteInfo() {
	$return = false;
	$apiurl = SAE_APIURL;
	$opts = array('a'=>'get');
	$result = curl_get($apiurl, $opts);
	if ( $result['status']!==false ) {
		$data = json_decode($result['result'], true);
		$return = $data['address'];
	}
	return $return;
}


	/**
	 * 提交GET请求，curl方法
	 * @param string  $url       请求url地址
	 * @param mixed   $data      GET数据,数组或类似id=1&k1=v1
	 * @param array   $header    头信息
	 * @param int     $timeout   超时时间
	 * @param int     $port      端口号
	 * @return array             请求结果,
	 *                            如果出错,返回结果为array('error'=>'','result'=>''),
	 *                            未出错，返回结果为array('result'=>''),
	 */
	function curl_get($url, $data = array(), $header = array(), $timeout = 5, $port = 80)
	{
	    $ch = curl_init();
	    if (!empty($data)) {
	        $data = is_array($data)?http_build_query($data): $data;
	        $url .= (strpos($url,'?')?  '&': "?") . $data;
	    }
	    curl_setopt($ch, CURLOPT_URL, $url);
	    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
	    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);
	    curl_setopt($ch, CURLOPT_POST, 0);
		if ( array_key_exists('Authorization', $header) ) {
			$auth_types = array(
				'basic' => CURLAUTH_BASIC,
			);

			$auths = explode(' ', $header['Authorization']);
			$auth_type = strtolower($auths[0]);
			$_data = array();
			if ( array_key_exists($auth_type, $auth_types) ) {
				$_data = $auths[1];
				if ( strpos($_data, ':')===false ) {
					$_data = base64_decode($_data);
				}
				$_data = explode(':', $_data);
			}
			if ( count($_data)==2 ) {
				curl_setopt($ch, CURLOPT_HTTPAUTH, $auth_types[$auth_type]);
				curl_setopt($ch, CURLOPT_USERPWD, implode(':', $_data));
				unset($header['Authorization']);
			}
		}
	    //curl_setopt($ch, CURLOPT_PORT, $port);
	    curl_setopt($ch, CURLOPT_HTTPHEADER, $header);

	    $result = array('status'=>true);
	    $result['result'] = curl_exec($ch);
	    if (0 != curl_errno($ch)) {
			$result['status'] = false;
	        $result['error']  = "Error:\n" . curl_error($ch);

	    }
	    curl_close($ch);
	    return $result;
	}

